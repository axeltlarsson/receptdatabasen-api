include env.conf;


worker_processes  1;
events {
    worker_connections  1024;
}

http {
    # set search paths for pure Lua code (';;' is the default path):
    lua_package_path '${prefix}/lua/?.lua;;';
    init_by_lua_file 'lua/init_phase.lua';
    # a shorter log format for development
    log_format development '$remote_addr [$time_local] "$request" $status $body_bytes_sent "$request_time ms"';

    resolver 127.0.0.11 ipv6=off;

    server_tokens off;

    include mime.types;

    # If we can't determine file type via mime.types, and it's not a lua or Postgres /rest json response...
    default_type application/octet-stream;

    # Include production configuration - folder will be empty for development
    include prod/*.conf;

    server {
        # TODO: should be a variable, ideally but cannot read from env in this context
        # so need to substitute it in probably...
        # N.B! 8080 is taken by process compose REST API
        listen 8081 default_server;
        server_name _;
        charset utf-8;


        # https://github.com/ledgetech/lua-resty-http/issues/42
        # lua_ssl_trusted_certificate only takes literal file paths - so cannot use env var for this
        # but the problem is that on NixOS the path is not /etc/ssl/certs/ca-certificates.crt
        # so we fix that in the Nix derivation instead and leave it hardcoded here for now
        lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        lua_ssl_verify_depth 2;

        # switch between log formats depending on env
        set_by_lua_block $development  { return os.getenv('DEVELOPMENT') or "0" }
        set $log_development 0;
        set $log_production 0;
        if ($development = "1") {
            set $log_development 1;
        }
        if ($development = "0") {
            set $log_production 1;
        }
        access_log /dev/stdout combined    if=$log_production;
        access_log /dev/stdout development if=$log_development;

        include gzip.conf;
        include rest.conf;
        include image_server.conf;
        include rich_link_preview.conf;

        location /live {
            types {}
            charset utf-8;
            default_type 'application/json';
            charset_types 'application/json';

            # disable logging for this endpoint to avoid spamming the logs
            access_log off;
            error_log stderr error;

            content_by_lua_block {
                local cjson = require 'cjson'
                ngx.say(cjson.encode({ status = 'ok' }))
            }
        }

        # SPA frontend setup
        location / {
            root html;
            # Let the SPA frontend handle routing
            try_files $uri /index.html;
        }

    }
}
