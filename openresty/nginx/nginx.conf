include env.conf;


worker_processes  1;
events {
    worker_connections  1024;
}

http {

    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '${prefix}../lua/?.lua;;';
    init_by_lua_file '../lua/init_phase.lua';
    # a shorter log format for development
    log_format development '$remote_addr [$time_local] "$request" $status $body_bytes_sent "$request_time ms"';

    resolver 127.0.0.11 ipv6=off;

    server_tokens off;

    include mime.types;

    # If we can't determine file type via mime.types, and it's not a lua or Postgres /rest json response...
    default_type application/octet-stream;

    # Include production configuration - folder will be empty for development
    include prod/*.conf;

    server {
        listen 80 default_server;
        server_name _;
        charset utf-8;
        # uninitialized_variable_warn off;

        # switch between log formats depending on env
        set_by_lua_block $development  { return os.getenv('DEVELOPMENT') or "0" }
        set $log_development 0;
        set $log_production 0;
        if ($development = "1") {
            set $log_development 1;
        }
        if ($development = "0") {
            set $log_production 1;
            set $session_cookie_secure on;
        }
        access_log logs/access.log combined    if=$log_production;
        access_log logs/access.log development if=$log_development;

        set_by_lua_block $session_secret  { return os.getenv('COOKIE_SESSION_SECRET') }
        set_by_lua_block $session_cookie_lifetime  { return os.getenv('COOKIE_SESSION_LIFETIME') }
        set $session_cookie_persistent on;

        include gzip.conf;
        include rest.conf;

        # SPA frontend setup
        location / {
            root html;
            # Let the SPA frontend handle routing
            try_files $uri /index.html;
        }

        include image_server.conf;
    }
}
