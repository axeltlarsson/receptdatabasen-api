# variable used by lua code, needs to match line below
set $rest_prefix "/rest";

location /rest/login {
  types {}
  charset utf-8;
  default_type 'application/json';
  charset_types 'application/json';
  content_by_lua_file '../lua/login.lua';
}

location /rest/logout {
  types {}
  charset utf-8;
  default_type 'application/json';
  charset_types 'application/json';

  content_by_lua_block {
    require "resty.session".destroy()
    local cjson = require "cjson"
    ngx.say(cjson.encode({ message = "Session was succesfully destroyed"}))
  }
}


location /rest/passkeys/registration/begin {
  types {}
  charset utf-8;
  default_type 'application/json';
  charset_types 'application/json';
  access_by_lua_file '../lua/session_authentication.lua';
  content_by_lua_file '../lua/passkeys/registration_begin.lua';
}

location /rest/passkeys/registration/complete {
  types {}
  charset utf-8;
  default_type 'application/json';
  charset_types 'application/json';
  access_by_lua_file '../lua/session_authentication.lua';
  content_by_lua_file '../lua/passkeys/registration_complete.lua';
}

location /rest/passkeys/authentication/begin {
  types {}
  charset utf-8;
  default_type 'application/json';
  charset_types 'application/json';
  content_by_lua_file '../lua/passkeys/authentication_begin.lua';
}

location /rest/passkeys/authentication/complete {
  types {}
  charset utf-8;
  default_type 'application/json';
  charset_types 'application/json';
  content_by_lua_file '../lua/passkeys/authentication_complete.lua';
}

location ~* ^/rest/rpc/(signup|refresh_token|login)$ {
  # Disable these routes:
  # /rest/rpc/signup - disabled
  # /rest/rpc/refresh_token - disabled
  # /rest/rpc/login - use /rest/login instead
  types {}
  charset utf-8;
  default_type 'application/json';
  charset_types 'application/json';
  content_by_lua_block {
    local utils = require 'utils';
    utils.return_error("", ngx.HTTP_NOT_FOUND)
  }
}

# user facing location for the rest api
location /rest {
    # rewrite for the main internal location
    rewrite ^/rest/(.*)$ /internal/rest/$1;
}

# main internal location that will forward requests to PostgREST
location /internal/rest/ {
    # this location is only avalable through internal redirects
    internal;
    default_type  application/json;

    # ensure we are authenticated
    access_by_lua_file '../lua/session_authentication.lua';

    rewrite_by_lua_file '../lua/internal_rest_rewrite_phase.lua';
    header_filter_by_lua_file '../lua/internal_rest_header_filter_phase.lua';
    body_filter_by_lua_file '../lua/internal_rest_body_filter_phase.lua';

    proxy_set_header  Accept-Encoding  ""; #force postgrest not to gzip the output
    proxy_set_header  Connection ""; #optimise communication with upstream (keep alive)
    proxy_set_header  Host $host;
    proxy_http_version 1.1;
    set_by_lua_block $postgrest_host  { return os.getenv('POSTGREST_HOST') or "0" }
    set_by_lua_block $postgrest_port  { return os.getenv('POSTGREST_PORT') or "0" }
    proxy_pass http://$postgrest_host:$postgrest_port; # Reverse proxy to your PostgREST

    # Rewrite the Content-Location header to match our location
    proxy_hide_header Content-Location;
    set_by_lua_block $rest_prefix  { return ngx.var.rest_prefix or "/rest" } # this needs to match user facing location path
    more_set_headers 'Content-Location: $rest_prefix$upstream_http_content_location';

    # Debug Info
    if ($development = "1") {
        more_set_headers 'Request-Time: $request_time';
    }

    # this needs to be at the end
    rewrite    /internal/rest(.+) $1 break;
}
