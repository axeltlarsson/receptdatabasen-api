location /images/upload {
    charset utf-8;
    default_type 'application/json';
    charset_types 'application/json';

    # ensure we are authenticated
    access_by_lua_file 'lua/session_authentication.lua';

    client_max_body_size 10M;
    client_body_buffer_size 10M;

    content_by_lua_file 'lua/image_upload.lua';
}

location @image_server {
    # serve_image.lua will never respond to client directly unless it fails with an error
    # if so, we want to respond with an error message in json, and not set content-type via
    # mime.types, as we do for the success case
    types {}
    charset utf-8;
    default_type 'application/json';
    charset_types 'application/json';
    content_by_lua_file 'lua/resize_image.lua';
}

location ~ ^/images/(?<sig>[^/]+)/(?<size>[^/]+)/(?<path>.*\.(?<ext>[a-z_]*))$ {
    # Explicitly deny requests containing traversal sequences
    if ($request_uri ~* "(\.\.|%2e%2e)") {
        return 403;
    }

    # Verify size is within reasonable bounds
    if ($size !~ "^[1-9]\d{0,3}$") {
        return 400;
    }

    # Verify extension is approved for images
    if ($ext !~ "^(jpeg|jpg|png|gif|webp)$") {
        return 400;
    }

    # ensure we are authenticated
    access_by_lua_file 'lua/session_authentication.lua';
    set_by_lua_block $file_upload_path { return os.getenv("FILE_UPLOAD_PATH") }

    sendfile on;
    tcp_nopush on;

    root $file_upload_path/cache;
    set_md5 $digest "$size/$path";
    try_files /$digest.$ext @image_server;

    # Add cache control headers - 30 days, allow public caches to cache image
    add_header Cache-Control "public, max-age=2592000";
}
