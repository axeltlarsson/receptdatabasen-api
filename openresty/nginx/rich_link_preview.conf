# Recipe routes with rich link preview metadata - publicly accessible
location ~ ^/recipe/ {
    root html;
    # Render rich preview metadata for recipe pages
    charset utf-8;
    default_type 'text/html';
    access_by_lua_file 'lua/rich_link_preview.lua';

    # If the Lua code doesn't handle the request, serve the SPA as usual
    try_files $uri /index.html;
}

# Internal endpoint for recipe preview function - no authentication required
location /internal/rest/rpc/recipe_preview_by_title {
    # This location is only available through internal redirects
    internal;
    default_type application/json;

    # Standard proxy configuration to PostgREST
    proxy_set_header Accept-Encoding "charset=utf-8";
    proxy_set_header Connection "";
    proxy_set_header Host $host;
    proxy_http_version 1.1;
    set_by_lua_block $postgrest_host { return os.getenv('POSTGREST_HOST') or "0" }
    set_by_lua_block $postgrest_port { return os.getenv('POSTGREST_PORT') or "0" }

    # We're explicitly NOT setting any Authentication headers to ensure anonymous access

    # Forward to the PostgREST endpoint
    proxy_pass http://$postgrest_host:$postgrest_port/rpc/recipe_preview_by_title;
}

location @public_image_server {
    # serve_image.lua will never respond to client directly unless it fails with an error
    # if so, we want to respond with an error message in json, and not set content-type via
    # mime.types, as we do for the success case
    types {}
    charset utf-8;
    default_type 'application/json';
    charset_types 'application/json';
    content_by_lua_file 'lua/serve_image.lua';
}

# Public image endpoint for link previews - NO authentication
location ~ ^/public-images/(?<size>[^/]+)/(?<path>.*\.(?<ext>[a-z_]*))$ {
    # Explicitly deny requests containing traversal sequences
    if ($request_uri ~* "(\.\.|%2e%2e)") {
        return 403;
    }
    
    # Verify size is within reasonable bounds
    if ($size !~ "^[1-9]\d{0,3}$") {
        return 400;
    }
    
    # Verify extension is approved for images
    if ($ext !~ "^(jpeg|jpg|png|gif|webp)$") {
        return 400;
    }

    sendfile on;
    tcp_nopush on;

    # Try to serve the image from cache first, otherwise fall back to @public_image_server
    set_by_lua_block $file_upload_path { return os.getenv("FILE_UPLOAD_PATH") }
    root $file_upload_path/cache;
    set_md5 $digest "$size/$path";
    try_files /$digest.$ext @public_image_server;

    # Add cache control headers - 30 days, allow public caches to cache image
    add_header Cache-Control "public, max-age=2592000";
}
